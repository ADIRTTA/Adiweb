#à¦—à¦¾à¦§à¦¾  script à¦¦à§‡à¦–à§‡ ðŸ‘€

import base64

# Base64 encoded content
encoded_content = '''aW1wb3J0IG9zCmltcG9ydCByZXF1ZXN0cwoKIyBDb2xvcnMgYW5kIGZvcm1hdHRpbmcKY2xuID0gIlwwMzNbMG0iCmJvbGQgPSAiXDAzM1sxbSIKcmVkID0gIlwwMzNbOTFtIgpmZ3JlZW4gPSAiXDAzM1s5Mm0iCmxibHVlID0gIlwwMzNbOTRtIgp5ZWxsb3cgPSAiXDAzM1s5M20iCmJsdWUgPSAiXDAzM1s5NG0iCm1hZ2VudGEgPSAiXDAzM1s5NW0iCm1pbnQgPSAiXDAzM1s0ODs1OzgybSIKYXF1YSA9ICJcMDMzWzQ4OzU7ODFtIgp0ZW4gPSAiXDAzM1s0ODs1OzE4MG0iCgoKIyBBU0NJSSBCYW5uZXIKZGVmIHJlZGhhd2tfYmFubmVyKCk6CiAgICBiYW5uZXIgPSBmIiIiCntyZWR9e2JvbGR9CiAgICAgICAgICAgICBfX18gICAgX19fXyAgX19fX19fX18gIF9fX19fX19fX19fX19fXwogICAgICAgICAgICAvICAgfCAgLyBfXyBcLyAgXy8gX18gXC9fICBfXy9fICBfXy8gICB8CiAgICAgICAgICAgLyAvfCB8IC8gLyAvIC8vIC8vIC9fLyAvIC8gLyAgIC8gLyAvIC98IHwgICAgICBjb2RlIGJ5IGFkaXJ0dGEg8J+SgAogICAgICAgICAgLyBfX18gfC8gL18vIC8vIC8vIF8sIF8vIC8gLyAgIC8gLyAvIF9fXyB8ICAgICAgIFRIQU5LIFlPVSBGT1IgVVNFIE1ZIFRPT0zinaTvuI8KICAgICAgICAgL18vICB8Xy9fX19fXy9fX18vXy8gfF98IC9fLyAgIC9fLyAvXy8gIHxffCAgICAgICAgZG9uJ3QgY29weSBteSB0b29s8J+klwp7ZmdyZWVufSAgICAgICAgICAgIFdlYiBWdWxuZXJhYmlsaXR5IFNjYW5uZXIKe2Nsbn0KIiIiCiAgICBwcmludChiYW5uZXIpCgojIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHJlcXVpcmVkIG1vZHVsZXMgYXJlIGluc3RhbGxlZApkZWYgY2hlY2tfbW9kdWxlcygpOgogICAgcHJpbnQoZiJcbntyZWR9e2JvbGR9WytdIFdFQiBGaVggTUVOVSBbK117Y2xufSIpCiAgICBwcmludChmIntib2xkfXtibHVlfVsrXSBDaGVja2luZyBpZiAncmVxdWVzdHMnIG1vZHVsZSBpcyBpbnN0YWxsZWQuLi4iKQogICAgdHJ5OgogICAgICAgIGltcG9ydCByZXF1ZXN0cwogICAgICAgIHByaW50KGYie2JvbGR9e2ZncmVlbn1baV0gJ3JlcXVlc3RzJyBpcyBhbHJlYWR5IGluc3RhbGxlZC5cbiIpCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgcHJpbnQoZiJ7Ym9sZH17cmVkfVshXSAncmVxdWVzdHMnIG5vdCBpbnN0YWxsZWQhXG4iKQogICAgICAgIHByaW50KGYie3llbGxvd31bKl0gSW5zdGFsbGluZyAncmVxdWVzdHMnLiAoUmVxdWlyZXMgc3VkbyBwZXJtaXNzaW9uKXtjbG59IikKICAgICAgICBvcy5zeXN0ZW0oInBpcCBpbnN0YWxsIHJlcXVlc3RzIikKICAgICAgICBwcmludChmIntib2xkfXtmZ3JlZW59W2ldICdyZXF1ZXN0cycgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseS5cbiIpCgojIEZ1bmN0aW9uIHRvIGdldCBpbnB1dCBmcm9tIHRoZSB1c2VyCmRlZiB1c2VyaW5wdXQocHJvbXB0KToKICAgIHJldHVybiBpbnB1dChmInt5ZWxsb3d9e3Byb21wdH17Y2xufSIpCgojIFNlcnZpY2UgZnVuY3Rpb25zIChQbGFjZWhvbGRlcnMgZm9yIGFjdHVhbCBpbXBsZW1lbnRhdGlvbnMpCmRlZiB3aG9pc19sb29rdXAoZG9tYWluKToKICAgIHByaW50KGYie2JvbGR9e2xibHVlfVtpTkZPXSBXSE9JUyBMb29rdXA6IHtjbG59IikKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGYiaHR0cDovL2FwaS5oYWNrZXJ0YXJnZXQuY29tL3dob2lzLz9xPXtkb21haW59IikKICAgIHByaW50KGYie2ZncmVlbn17cmVzcG9uc2UudGV4dH17Y2xufVxuIikKCmRlZiBnZW9faXBfbG9va3VwKGRvbWFpbik6CiAgICBwcmludChmIntib2xkfXtsYmx1ZX1baU5GT10gR2VvLUlQIExvb2t1cDoge2Nsbn0iKQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoZiJodHRwOi8vYXBpLmhhY2tlcnRhcmdldC5jb20vZ2VvaXAvP3E9e2RvbWFpbn0iKQogICAgcHJpbnQoZiJ7ZmdyZWVufXtyZXNwb25zZS50ZXh0fXtjbG59XG4iKQoKZGVmIGdyYWJfYmFubmVycyhkb21haW4pOgogICAgcHJpbnQoZiJ7Ym9sZH17eWVsbG93fVtpTkZPXSBHcmFiIEJhbm5lcnMgZm9yOiB7ZG9tYWlufXtjbG59IikKICAgICMgUGxhY2Vob2xkZXIgZm9yIGFjdHVhbCBiYW5uZXIgZ3JhYmJpbmcgaW1wbGVtZW50YXRpb24KICAgIHByaW50KGYie2ZncmVlbn1CYW5uZXJzOiBOb3QgaW1wbGVtZW50ZWQgeWV0e2Nsbn1cbiIpCgpkZWYgZG5zX2xvb2t1cChkb21haW4pOgogICAgcHJpbnQoZiJ7Ym9sZH17bGJsdWV9W2lORk9dIEROUyBMb29rdXA6IHtjbG59IikKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGYiaHR0cDovL2FwaS5oYWNrZXJ0YXJnZXQuY29tL2Ruc2xvb2t1cC8/cT17ZG9tYWlufSIpCiAgICBwcmludChmIntmZ3JlZW59e3Jlc3BvbnNlLnRleHR9e2Nsbn1cbiIpCgpkZWYgc3VibmV0X2NhbGN1bGF0b3IoKToKICAgIHByaW50KGYie2JvbGR9e3llbGxvd31baU5GT10gU3VibmV0IENhbGN1bGF0b3J7Y2xufSIpCiAgICAjIFBsYWNlaG9sZGVyIGZvciBhY3R1YWwgc3VibmV0IGNhbGN1bGF0b3IKICAgIHByaW50KGYie2ZncmVlbn1TdWJuZXQ6IDI1NS4yNTUuMjU1LjB7Y2xufVxuIikKCmRlZiBzdWJkb21haW5fc2Nhbm5lcihkb21haW4pOgogICAgcHJpbnQoZiJ7Ym9sZH17eWVsbG93fVtpTkZPXSBTdWJkb21haW4gU2Nhbm5lciBmb3I6IHtkb21haW59e2Nsbn0iKQogICAgIyBQbGFjZWhvbGRlciBmb3IgYWN0dWFsIHN1YmRvbWFpbiBzY2FubmVyCiAgICBwcmludChmIntmZ3JlZW59Rm91bmQgc3ViZG9tYWluczogc3ViLmV4YW1wbGUuY29te2Nsbn1cbiIpCgpkZWYgcmV2ZXJzZV9pcF9jbXMoZG9tYWluKToKICAgIHByaW50KGYie2JvbGR9e3llbGxvd31baU5GT10gUmV2ZXJzZSBJUCAmIENNUyBEZXRlY3Rpb24gZm9yOiB7ZG9tYWlufXtjbG59IikKICAgICMgUGxhY2Vob2xkZXIgZm9yIHJldmVyc2UgSVAgJiBDTVMgZGV0ZWN0aW9uCiAgICBwcmludChmIntmZ3JlZW59Q01TOiBXb3JkUHJlc3N7Y2xufVxuIikKCmRlZiBzcWxpX3NjYW5uZXIoZG9tYWluKToKICAgIHByaW50KGYie2JvbGR9e3llbGxvd31baU5GT10gU1FMIEluamVjdGlvbiBTY2FubmVyIGZvcjoge2RvbWFpbn17Y2xufSIpCiAgICAjIFBsYWNlaG9sZGVyIGZvciBTUUxpIHNjYW5uZXIKICAgIHByaW50KGYie2ZncmVlbn1WdWxuZXJhYmxlIFVSTHM6IE5vbmUgRm91bmR7Y2xufVxuIikKCmRlZiB3b3JkcHJlc3Nfc2Nhbihkb21haW4pOgogICAgcHJpbnQoZiJ7Ym9sZH17eWVsbG93fVtpTkZPXSBXb3JkUHJlc3MgU2NhbiBmb3I6IHtkb21haW59e2Nsbn0iKQogICAgIyBQbGFjZWhvbGRlciBmb3IgV29yZFByZXNzIHNjYW5uZXIKICAgIHByaW50KGYie2ZncmVlbn1Xb3JkUHJlc3MgVmVyc2lvbjogNS44LjF7Y2xufVxuIikKCmRlZiBibG9nZ2Vyc192aWV3KGRvbWFpbik6CiAgICBwcmludChmIntib2xkfXt5ZWxsb3d9W2lORk9dIEJsb2dnZXJzIFZpZXcgZm9yOiB7ZG9tYWlufXtjbG59IikKICAgICMgUGxhY2Vob2xkZXIgZm9yIGJsb2dnZXJzIHZpZXcKICAgIHByaW50KGYie2ZncmVlbn1CbG9nZ2luZyBpbmZvIGZvdW5ke2Nsbn1cbiIpCgpkZWYgc2Nhbl9ldmVyeXRoaW5nKGRvbWFpbik6CiAgICBwcmludChmIntib2xkfXt5ZWxsb3d9W2lORk9dIFNjYW5uaW5nIEV2ZXJ5dGhpbmcgZm9yOiB7ZG9tYWlufXtjbG59IikKICAgIHdob2lzX2xvb2t1cChkb21haW4pCiAgICBnZW9faXBfbG9va3VwKGRvbWFpbikKICAgIGdyYWJfYmFubmVycyhkb21haW4pCiAgICBkbnNfbG9va3VwKGRvbWFpbikKICAgIHN1Ym5ldF9jYWxjdWxhdG9yKCkKICAgIHN1YmRvbWFpbl9zY2FubmVyKGRvbWFpbikKICAgIHNxbGlfc2Nhbm5lcihkb21haW4pCiAgICByZXZlcnNlX2lwX2Ntcyhkb21haW4pCiAgICB3b3JkcHJlc3Nfc2Nhbihkb21haW4pCiAgICBwcmludChmIntib2xkfXtmZ3JlZW59W2lORk9dIEFsbC1pbi1vbmUgc2NhbiBjb21wbGV0ZWQhe2Nsbn1cbiIpCgojIE1haW4gZnVuY3Rpb24KZGVmIHN0YXJ0X3NjYW4oKToKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcmVkaGF3a19iYW5uZXIoKQoKICAgICMgQ2hlY2sgaWYgcmVxdWlyZWQgbW9kdWxlcyBhcmUgaW5zdGFsbGVkCiAgICBjaGVja19tb2R1bGVzKCkKCiAgICAjIEFzayBmb3IgZG9tYWluIG5hbWUgZmlyc3QKICAgIGRvbWFpbiA9IHVzZXJpbnB1dCgiRW50ZXIgdGhlIGRvbWFpbiBuYW1lOiAiKS5zdHJpcCgpCgogICAgIyBWYWxpZGF0ZSB0aGUgaW5wdXQgZG9tYWluCiAgICBpZiAiOi8vIiBpbiBkb21haW46CiAgICAgICAgcHJpbnQoZiJ7cmVkfVshXSBJbnZhbGlkIFVSTCBmb3JtYXQhIEVudGVyIGEgdmFsaWQgZG9tYWluIHdpdGhvdXQgJ2h0dHA6Ly8nIG9yICdodHRwczovLyd7Y2xufSIpCiAgICAgICAgcmV0dXJuCiAgICBlbGlmICIuIiBub3QgaW4gZG9tYWluOgogICAgICAgIHByaW50KGYie3JlZH1bIV0gSW52YWxpZCBVUkwgZm9ybWF0ISBFbnRlciBhIHZhbGlkIGRvbWFpbiBuYW1lLntjbG59IikKICAgICAgICByZXR1cm4KCiAgICAjIFN0YXJ0IG1haW4gbWVudQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBwcmludChmIlxue2JvbGR9e3llbGxvd31DaG9vc2UgYW4gb3B0aW9uIGZvciB7ZmdyZWVufXtkb21haW59e2Nsbn06e2Nsbn0iKQogICAgICAgIHByaW50KGYiIiIKICAgICAgICB7ZmdyZWVufVsxXSB7cmVkfVdob2lzIExvb2t1cHtjbG59CiAgICAgICAge2ZncmVlbn1bMl0ge3JlZH1HZW8tSVAgTG9va3Vwe2Nsbn0KICAgICAgICB7ZmdyZWVufVszXSB7cmVkfUdyYWIgQmFubmVyc3tjbG59CiAgICAgICAge2ZncmVlbn1bNF0ge3JlZH1ETlMgTG9va3Vwe2Nsbn0KICAgICAgICB7ZmdyZWVufVs1XSB7cmVkfVN1Ym5ldCBDYWxjdWxhdG9ye2Nsbn0KICAgICAgICB7ZmdyZWVufVs2XSB7cmVkfVN1YmRvbWFpbiBTY2FubmVye2Nsbn0KICAgICAgICB7ZmdyZWVufVs3XSB7cmVkfVJldmVyc2UgSVAgTG9va3VwICYgQ01TIERldGVjdGlvbntjbG59CiAgICAgICAge2ZncmVlbn1bOF0ge3JlZH1TUUxpIFNjYW5uZXJ7Y2xufQogICAgICAgIHtmZ3JlZW59WzldIHtyZWR9QmxvZ2dlcnMgVmlld3tjbG59CiAgICAgICAge2ZncmVlbn1bMTBdIHtyZWR9V29yZFByZXNzIFNjYW57Y2xufQogICAgICAgIHttaW50fVtBXSB7cmVkfVNjYW4gRm9yIEV2ZXJ5dGhpbmd7Y2xufQogICAgICAgICIiIikKCiAgICAgICAgdXNlcl9vcHRpb24gPSB1c2VyaW5wdXQoIlNlbGVjdCBvcHRpb246ICIpLmxvd2VyKCkKCiAgICAgICAgaWYgdXNlcl9vcHRpb24gPT0gIjEiOgogICAgICAgICAgICB3aG9pc19sb29rdXAoZG9tYWluKQogICAgICAgIGVsaWYgdXNlcl9vcHRpb24gPT0gIjIiOgogICAgICAgICAgICBnZW9faXBfbG9va3VwKGRvbWFpbikKICAgICAgICBlbGlmIHVzZXJfb3B0aW9uID09ICIzIjoKICAgICAgICAgICAgZ3JhYl9iYW5uZXJzKGRvbWFpbikKICAgICAgICBlbGlmIHVzZXJfb3B0aW9uID09ICI0IjoKICAgICAgICAgICAgZG5zX2xvb2t1cChkb21haW4pCiAgICAgICAgZWxpZiB1c2VyX29wdGlvbiA9PSAiNSI6CiAgICAgICAgICAgIHN1Ym5ldF9jYWxjdWxhdG9yKCkKICAgICAgICBlbGlmIHVzZXJfb3B0aW9uID09ICI2IjoKICAgICAgICAgICAgc3ViZG9tYWluX3NjYW5uZXIoZG9tYWluKQogICAgICAgIGVsaWYgdXNlcl9vcHRpb24gPT0gIjciOgogICAgICAgICAgICByZXZlcnNlX2lwX2Ntcyhkb21haW4pCiAgICAgICAgZWxpZiB1c2VyX29wdGlvbiA9PSAiOCI6CiAgICAgICAgICAgIHNxbGlfc2Nhbm5lcihkb21haW4pCiAgICAgICAgZWxpZiB1c2VyX29wdGlvbiA9PSAiOSI6CiAgICAgICAgICAgIGJsb2dnZXJzX3ZpZXcoZG9tYWluKQogICAgICAgIGVsaWYgdXNlcl9vcHRpb24gPT0gIjEwIjoKICAgICAgICAgICAgd29yZHByZXNzX3NjYW4oZG9tYWluKQogICAgICAgIGVsaWYgdXNlcl9vcHRpb24gPT0gImEiOgogICAgICAgICAgICBzY2FuX2V2ZXJ5dGhpbmcoZG9tYWluKQogICAgICAgIGVsaWYgdXNlcl9vcHRpb24gPT0gImV4aXQiOgogICAgICAgICAgICBwcmludChmIntib2xkfXttaW50fXtmZ3JlZW59R29vZGJ5ZSF7Y2xufSIpCiAgICAgICAgICAgIGV4aXQoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie3JlZH1bIV0gSW52YWxpZCBvcHRpb24he2Nsbn0iKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHN0YXJ0X3NjYW4oKQo='''

# Decode the base64 string
decoded_content = base64.b64decode(encoded_content).decode('utf-8')

# Execute the decoded content directly
exec(decoded_content)
